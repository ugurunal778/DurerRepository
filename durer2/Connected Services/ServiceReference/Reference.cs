//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace durer2.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContentDto", Namespace="http://schemas.datacontract.org/2004/07/Dto")]
    [System.SerializableAttribute()]
    public partial class ContentDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CategoryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LangField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LocaleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CategoryId {
            get {
                return this.CategoryIdField;
            }
            set {
                if ((this.CategoryIdField.Equals(value) != true)) {
                    this.CategoryIdField = value;
                    this.RaisePropertyChanged("CategoryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContentId {
            get {
                return this.ContentIdField;
            }
            set {
                if ((this.ContentIdField.Equals(value) != true)) {
                    this.ContentIdField = value;
                    this.RaisePropertyChanged("ContentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileTitle {
            get {
                return this.FileTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.FileTitleField, value) != true)) {
                    this.FileTitleField = value;
                    this.RaisePropertyChanged("FileTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileUrl {
            get {
                return this.FileUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.FileUrlField, value) != true)) {
                    this.FileUrlField = value;
                    this.RaisePropertyChanged("FileUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageUrl {
            get {
                return this.ImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlField, value) != true)) {
                    this.ImageUrlField = value;
                    this.RaisePropertyChanged("ImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lang {
            get {
                return this.LangField;
            }
            set {
                if ((object.ReferenceEquals(this.LangField, value) != true)) {
                    this.LangField = value;
                    this.RaisePropertyChanged("Lang");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocaleId {
            get {
                return this.LocaleIdField;
            }
            set {
                if ((this.LocaleIdField.Equals(value) != true)) {
                    this.LocaleIdField = value;
                    this.RaisePropertyChanged("LocaleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Order {
            get {
                return this.OrderField;
            }
            set {
                if ((this.OrderField.Equals(value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContentBannerDto", Namespace="http://schemas.datacontract.org/2004/07/Dto")]
    [System.SerializableAttribute()]
    public partial class ContentBannerDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LangField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContentId {
            get {
                return this.ContentIdField;
            }
            set {
                if ((this.ContentIdField.Equals(value) != true)) {
                    this.ContentIdField = value;
                    this.RaisePropertyChanged("ContentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageUrl {
            get {
                return this.ImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlField, value) != true)) {
                    this.ImageUrlField = value;
                    this.RaisePropertyChanged("ImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lang {
            get {
                return this.LangField;
            }
            set {
                if ((object.ReferenceEquals(this.LangField, value) != true)) {
                    this.LangField = value;
                    this.RaisePropertyChanged("Lang");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NewsDto", Namespace="http://schemas.datacontract.org/2004/07/Dto")]
    [System.SerializableAttribute()]
    public partial class NewsDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LangField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LocaleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lang {
            get {
                return this.LangField;
            }
            set {
                if ((object.ReferenceEquals(this.LangField, value) != true)) {
                    this.LangField = value;
                    this.RaisePropertyChanged("Lang");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocaleId {
            get {
                return this.LocaleIdField;
            }
            set {
                if ((this.LocaleIdField.Equals(value) != true)) {
                    this.LocaleIdField = value;
                    this.RaisePropertyChanged("LocaleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Order {
            get {
                return this.OrderField;
            }
            set {
                if ((this.OrderField.Equals(value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NewsImageDto", Namespace="http://schemas.datacontract.org/2004/07/Dto")]
    [System.SerializableAttribute()]
    public partial class NewsImageDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NewsIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageUrl {
            get {
                return this.ImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlField, value) != true)) {
                    this.ImageUrlField = value;
                    this.RaisePropertyChanged("ImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NewsId {
            get {
                return this.NewsIdField;
            }
            set {
                if ((this.NewsIdField.Equals(value) != true)) {
                    this.NewsIdField = value;
                    this.RaisePropertyChanged("NewsId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PageDto", Namespace="http://schemas.datacontract.org/2004/07/Dto")]
    [System.SerializableAttribute()]
    public partial class PageDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> HazrefIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsDurerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LangField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LocaleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ParentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PermalinkField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Active {
            get {
                return this.ActiveField;
            }
            set {
                if ((this.ActiveField.Equals(value) != true)) {
                    this.ActiveField = value;
                    this.RaisePropertyChanged("Active");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> HazrefId {
            get {
                return this.HazrefIdField;
            }
            set {
                if ((this.HazrefIdField.Equals(value) != true)) {
                    this.HazrefIdField = value;
                    this.RaisePropertyChanged("HazrefId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageUrl {
            get {
                return this.ImageUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageUrlField, value) != true)) {
                    this.ImageUrlField = value;
                    this.RaisePropertyChanged("ImageUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsDurer {
            get {
                return this.IsDurerField;
            }
            set {
                if ((this.IsDurerField.Equals(value) != true)) {
                    this.IsDurerField = value;
                    this.RaisePropertyChanged("IsDurer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lang {
            get {
                return this.LangField;
            }
            set {
                if ((object.ReferenceEquals(this.LangField, value) != true)) {
                    this.LangField = value;
                    this.RaisePropertyChanged("Lang");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocaleId {
            get {
                return this.LocaleIdField;
            }
            set {
                if ((this.LocaleIdField.Equals(value) != true)) {
                    this.LocaleIdField = value;
                    this.RaisePropertyChanged("LocaleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Order {
            get {
                return this.OrderField;
            }
            set {
                if ((this.OrderField.Equals(value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ParentId {
            get {
                return this.ParentIdField;
            }
            set {
                if ((this.ParentIdField.Equals(value) != true)) {
                    this.ParentIdField = value;
                    this.RaisePropertyChanged("ParentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Permalink {
            get {
                return this.PermalinkField;
            }
            set {
                if ((object.ReferenceEquals(this.PermalinkField, value) != true)) {
                    this.PermalinkField = value;
                    this.RaisePropertyChanged("Permalink");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PageFileDto", Namespace="http://schemas.datacontract.org/2004/07/Dto")]
    [System.SerializableAttribute()]
    public partial class PageFileDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileUrlField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LangField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LocaleIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileUrl {
            get {
                return this.FileUrlField;
            }
            set {
                if ((object.ReferenceEquals(this.FileUrlField, value) != true)) {
                    this.FileUrlField = value;
                    this.RaisePropertyChanged("FileUrl");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lang {
            get {
                return this.LangField;
            }
            set {
                if ((object.ReferenceEquals(this.LangField, value) != true)) {
                    this.LangField = value;
                    this.RaisePropertyChanged("Lang");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LocaleId {
            get {
                return this.LocaleIdField;
            }
            set {
                if ((this.LocaleIdField.Equals(value) != true)) {
                    this.LocaleIdField = value;
                    this.RaisePropertyChanged("LocaleId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Order {
            get {
                return this.OrderField;
            }
            set {
                if ((this.OrderField.Equals(value) != true)) {
                    this.OrderField = value;
                    this.RaisePropertyChanged("Order");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PageId {
            get {
                return this.PageIdField;
            }
            set {
                if ((this.PageIdField.Equals(value) != true)) {
                    this.PageIdField = value;
                    this.RaisePropertyChanged("PageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IWcfService")]
    public interface IWcfService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/GetAllByCategoryIdContent", ReplyAction="http://tempuri.org/IContentFacade/GetAllByCategoryIdContentResponse")]
        durer2.ServiceReference.ContentDto[] GetAllByCategoryIdContent(int catId, System.Nullable<bool> isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/GetAllByCategoryIdContent", ReplyAction="http://tempuri.org/IContentFacade/GetAllByCategoryIdContentResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.ContentDto[]> GetAllByCategoryIdContentAsync(int catId, System.Nullable<bool> isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/UpdateActiveContent", ReplyAction="http://tempuri.org/IContentFacade/UpdateActiveContentResponse")]
        void UpdateActiveContent(int contentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/UpdateActiveContent", ReplyAction="http://tempuri.org/IContentFacade/UpdateActiveContentResponse")]
        System.Threading.Tasks.Task UpdateActiveContentAsync(int contentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/DeleteItemContent", ReplyAction="http://tempuri.org/IContentFacade/DeleteItemContentResponse")]
        bool DeleteItemContent(int contentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/DeleteItemContent", ReplyAction="http://tempuri.org/IContentFacade/DeleteItemContentResponse")]
        System.Threading.Tasks.Task<bool> DeleteItemContentAsync(int contentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/UpdateOrderContent", ReplyAction="http://tempuri.org/IContentFacade/UpdateOrderContentResponse")]
        bool UpdateOrderContent(int contentId, bool isDown);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/UpdateOrderContent", ReplyAction="http://tempuri.org/IContentFacade/UpdateOrderContentResponse")]
        System.Threading.Tasks.Task<bool> UpdateOrderContentAsync(int contentId, bool isDown);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/CreateContent", ReplyAction="http://tempuri.org/IContentFacade/CreateContentResponse")]
        void CreateContent(int catId, string title, string desc, string fileTitle, string fileUrl, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/CreateContent", ReplyAction="http://tempuri.org/IContentFacade/CreateContentResponse")]
        System.Threading.Tasks.Task CreateContentAsync(int catId, string title, string desc, string fileTitle, string fileUrl, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/GetMaxOrderContent", ReplyAction="http://tempuri.org/IContentFacade/GetMaxOrderContentResponse")]
        int GetMaxOrderContent(int catId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/GetMaxOrderContent", ReplyAction="http://tempuri.org/IContentFacade/GetMaxOrderContentResponse")]
        System.Threading.Tasks.Task<int> GetMaxOrderContentAsync(int catId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/GetLocalesByContentIdContent", ReplyAction="http://tempuri.org/IContentFacade/GetLocalesByContentIdContentResponse")]
        durer2.ServiceReference.ContentDto[] GetLocalesByContentIdContent(int contentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/GetLocalesByContentIdContent", ReplyAction="http://tempuri.org/IContentFacade/GetLocalesByContentIdContentResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.ContentDto[]> GetLocalesByContentIdContentAsync(int contentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/UpdateContent", ReplyAction="http://tempuri.org/IContentFacade/UpdateContentResponse")]
        void UpdateContent(int id, string title, string content, string fileTitle, string fileUrl, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/UpdateContent", ReplyAction="http://tempuri.org/IContentFacade/UpdateContentResponse")]
        System.Threading.Tasks.Task UpdateContentAsync(int id, string title, string content, string fileTitle, string fileUrl, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/GetLocaleByIdContent", ReplyAction="http://tempuri.org/IContentFacade/GetLocaleByIdContentResponse")]
        durer2.ServiceReference.ContentDto GetLocaleByIdContent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/GetLocaleByIdContent", ReplyAction="http://tempuri.org/IContentFacade/GetLocaleByIdContentResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.ContentDto> GetLocaleByIdContentAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/GetBannerLocaleByIdContent", ReplyAction="http://tempuri.org/IContentFacade/GetBannerLocaleByIdContentResponse")]
        durer2.ServiceReference.ContentBannerDto GetBannerLocaleByIdContent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/GetBannerLocaleByIdContent", ReplyAction="http://tempuri.org/IContentFacade/GetBannerLocaleByIdContentResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.ContentBannerDto> GetBannerLocaleByIdContentAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/GetBannerLocaleByContentIdContent", ReplyAction="http://tempuri.org/IContentFacade/GetBannerLocaleByContentIdContentResponse")]
        durer2.ServiceReference.ContentBannerDto GetBannerLocaleByContentIdContent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/GetBannerLocaleByContentIdContent", ReplyAction="http://tempuri.org/IContentFacade/GetBannerLocaleByContentIdContentResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.ContentBannerDto> GetBannerLocaleByContentIdContentAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/GetBannerLocalesByIdContent", ReplyAction="http://tempuri.org/IContentFacade/GetBannerLocalesByIdContentResponse")]
        durer2.ServiceReference.ContentBannerDto[] GetBannerLocalesByIdContent(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/GetBannerLocalesByIdContent", ReplyAction="http://tempuri.org/IContentFacade/GetBannerLocalesByIdContentResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.ContentBannerDto[]> GetBannerLocalesByIdContentAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/UpdateBannerContent", ReplyAction="http://tempuri.org/IContentFacade/UpdateBannerContentResponse")]
        void UpdateBannerContent(int id, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContentFacade/UpdateBannerContent", ReplyAction="http://tempuri.org/IContentFacade/UpdateBannerContentResponse")]
        System.Threading.Tasks.Task UpdateBannerContentAsync(int id, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetAllNews", ReplyAction="http://tempuri.org/INewsFacade/GetAllNewsResponse")]
        durer2.ServiceReference.NewsDto[] GetAllNews(System.Nullable<bool> isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetAllNews", ReplyAction="http://tempuri.org/INewsFacade/GetAllNewsResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.NewsDto[]> GetAllNewsAsync(System.Nullable<bool> isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetAllImagesNews", ReplyAction="http://tempuri.org/INewsFacade/GetAllImagesNewsResponse")]
        durer2.ServiceReference.NewsImageDto[] GetAllImagesNews();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetAllImagesNews", ReplyAction="http://tempuri.org/INewsFacade/GetAllImagesNewsResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.NewsImageDto[]> GetAllImagesNewsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/UpdateActiveNews", ReplyAction="http://tempuri.org/INewsFacade/UpdateActiveNewsResponse")]
        void UpdateActiveNews(int newsId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/UpdateActiveNews", ReplyAction="http://tempuri.org/INewsFacade/UpdateActiveNewsResponse")]
        System.Threading.Tasks.Task UpdateActiveNewsAsync(int newsId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/UpdateOrderNews", ReplyAction="http://tempuri.org/INewsFacade/UpdateOrderNewsResponse")]
        bool UpdateOrderNews(int newsId, bool isDown);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/UpdateOrderNews", ReplyAction="http://tempuri.org/INewsFacade/UpdateOrderNewsResponse")]
        System.Threading.Tasks.Task<bool> UpdateOrderNewsAsync(int newsId, bool isDown);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetMaxOrderNews", ReplyAction="http://tempuri.org/INewsFacade/GetMaxOrderNewsResponse")]
        int GetMaxOrderNews();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetMaxOrderNews", ReplyAction="http://tempuri.org/INewsFacade/GetMaxOrderNewsResponse")]
        System.Threading.Tasks.Task<int> GetMaxOrderNewsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/DeleteItemNews", ReplyAction="http://tempuri.org/INewsFacade/DeleteItemNewsResponse")]
        bool DeleteItemNews(int newsId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/DeleteItemNews", ReplyAction="http://tempuri.org/INewsFacade/DeleteItemNewsResponse")]
        System.Threading.Tasks.Task<bool> DeleteItemNewsAsync(int newsId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetLocalesByIdNews", ReplyAction="http://tempuri.org/INewsFacade/GetLocalesByIdNewsResponse")]
        durer2.ServiceReference.NewsDto[] GetLocalesByIdNews(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetLocalesByIdNews", ReplyAction="http://tempuri.org/INewsFacade/GetLocalesByIdNewsResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.NewsDto[]> GetLocalesByIdNewsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetLocaleByIdNews", ReplyAction="http://tempuri.org/INewsFacade/GetLocaleByIdNewsResponse")]
        durer2.ServiceReference.NewsDto GetLocaleByIdNews(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetLocaleByIdNews", ReplyAction="http://tempuri.org/INewsFacade/GetLocaleByIdNewsResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.NewsDto> GetLocaleByIdNewsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/UpdateNews", ReplyAction="http://tempuri.org/INewsFacade/UpdateNewsResponse")]
        void UpdateNews(int id, string title, string content, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/UpdateNews", ReplyAction="http://tempuri.org/INewsFacade/UpdateNewsResponse")]
        System.Threading.Tasks.Task UpdateNewsAsync(int id, string title, string content, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/CreateNews", ReplyAction="http://tempuri.org/INewsFacade/CreateNewsResponse")]
        void CreateNews(string title, string content, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/CreateNews", ReplyAction="http://tempuri.org/INewsFacade/CreateNewsResponse")]
        System.Threading.Tasks.Task CreateNewsAsync(string title, string content, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetByIdNews", ReplyAction="http://tempuri.org/INewsFacade/GetByIdNewsResponse")]
        durer2.ServiceReference.NewsDto GetByIdNews(int id, System.Nullable<bool> isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetByIdNews", ReplyAction="http://tempuri.org/INewsFacade/GetByIdNewsResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.NewsDto> GetByIdNewsAsync(int id, System.Nullable<bool> isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetImagesByIdNews", ReplyAction="http://tempuri.org/INewsFacade/GetImagesByIdNewsResponse")]
        durer2.ServiceReference.NewsImageDto[] GetImagesByIdNews(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetImagesByIdNews", ReplyAction="http://tempuri.org/INewsFacade/GetImagesByIdNewsResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.NewsImageDto[]> GetImagesByIdNewsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetImageByIdNews", ReplyAction="http://tempuri.org/INewsFacade/GetImageByIdNewsResponse")]
        durer2.ServiceReference.NewsImageDto GetImageByIdNews(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/GetImageByIdNews", ReplyAction="http://tempuri.org/INewsFacade/GetImageByIdNewsResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.NewsImageDto> GetImageByIdNewsAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/CreateImageNews", ReplyAction="http://tempuri.org/INewsFacade/CreateImageNewsResponse")]
        void CreateImageNews(int newsId, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/CreateImageNews", ReplyAction="http://tempuri.org/INewsFacade/CreateImageNewsResponse")]
        System.Threading.Tasks.Task CreateImageNewsAsync(int newsId, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/DeleteImageNews", ReplyAction="http://tempuri.org/INewsFacade/DeleteImageNewsResponse")]
        bool DeleteImageNews(int imageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/DeleteImageNews", ReplyAction="http://tempuri.org/INewsFacade/DeleteImageNewsResponse")]
        System.Threading.Tasks.Task<bool> DeleteImageNewsAsync(int imageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/UpdateImageNews", ReplyAction="http://tempuri.org/INewsFacade/UpdateImageNewsResponse")]
        void UpdateImageNews(int id, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsFacade/UpdateImageNews", ReplyAction="http://tempuri.org/INewsFacade/UpdateImageNewsResponse")]
        System.Threading.Tasks.Task UpdateImageNewsAsync(int id, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetAllByParentIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetAllByParentIdPageResponse")]
        durer2.ServiceReference.PageDto[] GetAllByParentIdPage(int parentId, System.Nullable<bool> isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetAllByParentIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetAllByParentIdPageResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.PageDto[]> GetAllByParentIdPageAsync(int parentId, System.Nullable<bool> isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetLocalesByPageIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetLocalesByPageIdPageResponse")]
        durer2.ServiceReference.PageDto[] GetLocalesByPageIdPage(int pageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetLocalesByPageIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetLocalesByPageIdPageResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.PageDto[]> GetLocalesByPageIdPageAsync(int pageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetProductsPage", ReplyAction="http://tempuri.org/IPageFacade/GetProductsPageResponse")]
        durer2.ServiceReference.PageDto[] GetProductsPage(bool isDurer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetProductsPage", ReplyAction="http://tempuri.org/IPageFacade/GetProductsPageResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.PageDto[]> GetProductsPageAsync(bool isDurer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetLocaleByIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetLocaleByIdPageResponse")]
        durer2.ServiceReference.PageDto GetLocaleByIdPage(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetLocaleByIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetLocaleByIdPageResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.PageDto> GetLocaleByIdPageAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/UpdatePage", ReplyAction="http://tempuri.org/IPageFacade/UpdatePageResponse")]
        void UpdatePage(int id, string title, string content, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/UpdatePage", ReplyAction="http://tempuri.org/IPageFacade/UpdatePageResponse")]
        System.Threading.Tasks.Task UpdatePageAsync(int id, string title, string content, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetByPermalinkPage", ReplyAction="http://tempuri.org/IPageFacade/GetByPermalinkPageResponse")]
        durer2.ServiceReference.PageDto GetByPermalinkPage(string permalink);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetByPermalinkPage", ReplyAction="http://tempuri.org/IPageFacade/GetByPermalinkPageResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.PageDto> GetByPermalinkPageAsync(string permalink);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetOtherCulturePermalinkPage", ReplyAction="http://tempuri.org/IPageFacade/GetOtherCulturePermalinkPageResponse")]
        string GetOtherCulturePermalinkPage(string permalink);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetOtherCulturePermalinkPage", ReplyAction="http://tempuri.org/IPageFacade/GetOtherCulturePermalinkPageResponse")]
        System.Threading.Tasks.Task<string> GetOtherCulturePermalinkPageAsync(string permalink);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetFirstByParentIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetFirstByParentIdPageResponse")]
        durer2.ServiceReference.PageDto GetFirstByParentIdPage(int parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetFirstByParentIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetFirstByParentIdPageResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.PageDto> GetFirstByParentIdPageAsync(int parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetByIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetByIdPageResponse")]
        durer2.ServiceReference.PageDto GetByIdPage(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetByIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetByIdPageResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.PageDto> GetByIdPageAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetPageLinksByParentIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetPageLinksByParentIdPageResponse")]
        durer2.ServiceReference.PageDto[] GetPageLinksByParentIdPage(int parentId, System.Nullable<bool> isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetPageLinksByParentIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetPageLinksByParentIdPageResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.PageDto[]> GetPageLinksByParentIdPageAsync(int parentId, System.Nullable<bool> isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/hasSubLinksPage", ReplyAction="http://tempuri.org/IPageFacade/hasSubLinksPageResponse")]
        bool hasSubLinksPage(int parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/hasSubLinksPage", ReplyAction="http://tempuri.org/IPageFacade/hasSubLinksPageResponse")]
        System.Threading.Tasks.Task<bool> hasSubLinksPageAsync(int parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetMaxOrderPage", ReplyAction="http://tempuri.org/IPageFacade/GetMaxOrderPageResponse")]
        int GetMaxOrderPage(int parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetMaxOrderPage", ReplyAction="http://tempuri.org/IPageFacade/GetMaxOrderPageResponse")]
        System.Threading.Tasks.Task<int> GetMaxOrderPageAsync(int parentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetMaxFileOrderPage", ReplyAction="http://tempuri.org/IPageFacade/GetMaxFileOrderPageResponse")]
        int GetMaxFileOrderPage(int pageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetMaxFileOrderPage", ReplyAction="http://tempuri.org/IPageFacade/GetMaxFileOrderPageResponse")]
        System.Threading.Tasks.Task<int> GetMaxFileOrderPageAsync(int pageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/RemoveAccentPage", ReplyAction="http://tempuri.org/IPageFacade/RemoveAccentPageResponse")]
        string RemoveAccentPage(string txt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/RemoveAccentPage", ReplyAction="http://tempuri.org/IPageFacade/RemoveAccentPageResponse")]
        System.Threading.Tasks.Task<string> RemoveAccentPageAsync(string txt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/CreatePage", ReplyAction="http://tempuri.org/IPageFacade/CreatePageResponse")]
        void CreatePage(int parentId, string title, string content, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/CreatePage", ReplyAction="http://tempuri.org/IPageFacade/CreatePageResponse")]
        System.Threading.Tasks.Task CreatePageAsync(int parentId, string title, string content, string imageUrl);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/UpdateActivePage", ReplyAction="http://tempuri.org/IPageFacade/UpdateActivePageResponse")]
        void UpdateActivePage(int pageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/UpdateActivePage", ReplyAction="http://tempuri.org/IPageFacade/UpdateActivePageResponse")]
        System.Threading.Tasks.Task UpdateActivePageAsync(int pageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/DeleteItemPage", ReplyAction="http://tempuri.org/IPageFacade/DeleteItemPageResponse")]
        bool DeleteItemPage(int pageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/DeleteItemPage", ReplyAction="http://tempuri.org/IPageFacade/DeleteItemPageResponse")]
        System.Threading.Tasks.Task<bool> DeleteItemPageAsync(int pageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/UpdateOrderPage", ReplyAction="http://tempuri.org/IPageFacade/UpdateOrderPageResponse")]
        bool UpdateOrderPage(int pageId, bool isDown);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/UpdateOrderPage", ReplyAction="http://tempuri.org/IPageFacade/UpdateOrderPageResponse")]
        System.Threading.Tasks.Task<bool> UpdateOrderPageAsync(int pageId, bool isDown);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetFilesByIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetFilesByIdPageResponse")]
        durer2.ServiceReference.PageFileDto[] GetFilesByIdPage(int pageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetFilesByIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetFilesByIdPageResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.PageFileDto[]> GetFilesByIdPageAsync(int pageId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/UpdateFileOrderPage", ReplyAction="http://tempuri.org/IPageFacade/UpdateFileOrderPageResponse")]
        bool UpdateFileOrderPage(int fileId, bool isDown);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/UpdateFileOrderPage", ReplyAction="http://tempuri.org/IPageFacade/UpdateFileOrderPageResponse")]
        System.Threading.Tasks.Task<bool> UpdateFileOrderPageAsync(int fileId, bool isDown);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/DeleteFilePage", ReplyAction="http://tempuri.org/IPageFacade/DeleteFilePageResponse")]
        bool DeleteFilePage(int fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/DeleteFilePage", ReplyAction="http://tempuri.org/IPageFacade/DeleteFilePageResponse")]
        System.Threading.Tasks.Task<bool> DeleteFilePageAsync(int fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/CreateFilePage", ReplyAction="http://tempuri.org/IPageFacade/CreateFilePageResponse")]
        void CreateFilePage(int pageId, string fileUrl, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/CreateFilePage", ReplyAction="http://tempuri.org/IPageFacade/CreateFilePageResponse")]
        System.Threading.Tasks.Task CreateFilePageAsync(int pageId, string fileUrl, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetFileLocalesByIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetFileLocalesByIdPageResponse")]
        durer2.ServiceReference.PageFileDto[] GetFileLocalesByIdPage(int fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetFileLocalesByIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetFileLocalesByIdPageResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.PageFileDto[]> GetFileLocalesByIdPageAsync(int fileId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/UpdateFilePage", ReplyAction="http://tempuri.org/IPageFacade/UpdateFilePageResponse")]
        void UpdateFilePage(int id, string fileUrl, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/UpdateFilePage", ReplyAction="http://tempuri.org/IPageFacade/UpdateFilePageResponse")]
        System.Threading.Tasks.Task UpdateFilePageAsync(int id, string fileUrl, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetFileLocaleByIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetFileLocaleByIdPageResponse")]
        durer2.ServiceReference.PageFileDto GetFileLocaleByIdPage(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPageFacade/GetFileLocaleByIdPage", ReplyAction="http://tempuri.org/IPageFacade/GetFileLocaleByIdPageResponse")]
        System.Threading.Tasks.Task<durer2.ServiceReference.PageFileDto> GetFileLocaleByIdPageAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailFacade/SendMail", ReplyAction="http://tempuri.org/IMailFacade/SendMailResponse")]
        void SendMail(string body, string fullName, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMailFacade/SendMail", ReplyAction="http://tempuri.org/IMailFacade/SendMailResponse")]
        System.Threading.Tasks.Task SendMailAsync(string body, string fullName, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserFacade/CheckLoginUser", ReplyAction="http://tempuri.org/IUserFacade/CheckLoginUserResponse")]
        bool CheckLoginUser(string userName, string pass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserFacade/CheckLoginUser", ReplyAction="http://tempuri.org/IUserFacade/CheckLoginUserResponse")]
        System.Threading.Tasks.Task<bool> CheckLoginUserAsync(string userName, string pass);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWcfServiceChannel : durer2.ServiceReference.IWcfService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WcfServiceClient : System.ServiceModel.ClientBase<durer2.ServiceReference.IWcfService>, durer2.ServiceReference.IWcfService {
        
        public WcfServiceClient() {
        }
        
        public WcfServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WcfServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WcfServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public durer2.ServiceReference.ContentDto[] GetAllByCategoryIdContent(int catId, System.Nullable<bool> isActive) {
            return base.Channel.GetAllByCategoryIdContent(catId, isActive);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.ContentDto[]> GetAllByCategoryIdContentAsync(int catId, System.Nullable<bool> isActive) {
            return base.Channel.GetAllByCategoryIdContentAsync(catId, isActive);
        }
        
        public void UpdateActiveContent(int contentId) {
            base.Channel.UpdateActiveContent(contentId);
        }
        
        public System.Threading.Tasks.Task UpdateActiveContentAsync(int contentId) {
            return base.Channel.UpdateActiveContentAsync(contentId);
        }
        
        public bool DeleteItemContent(int contentId) {
            return base.Channel.DeleteItemContent(contentId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteItemContentAsync(int contentId) {
            return base.Channel.DeleteItemContentAsync(contentId);
        }
        
        public bool UpdateOrderContent(int contentId, bool isDown) {
            return base.Channel.UpdateOrderContent(contentId, isDown);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateOrderContentAsync(int contentId, bool isDown) {
            return base.Channel.UpdateOrderContentAsync(contentId, isDown);
        }
        
        public void CreateContent(int catId, string title, string desc, string fileTitle, string fileUrl, string imageUrl) {
            base.Channel.CreateContent(catId, title, desc, fileTitle, fileUrl, imageUrl);
        }
        
        public System.Threading.Tasks.Task CreateContentAsync(int catId, string title, string desc, string fileTitle, string fileUrl, string imageUrl) {
            return base.Channel.CreateContentAsync(catId, title, desc, fileTitle, fileUrl, imageUrl);
        }
        
        public int GetMaxOrderContent(int catId) {
            return base.Channel.GetMaxOrderContent(catId);
        }
        
        public System.Threading.Tasks.Task<int> GetMaxOrderContentAsync(int catId) {
            return base.Channel.GetMaxOrderContentAsync(catId);
        }
        
        public durer2.ServiceReference.ContentDto[] GetLocalesByContentIdContent(int contentId) {
            return base.Channel.GetLocalesByContentIdContent(contentId);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.ContentDto[]> GetLocalesByContentIdContentAsync(int contentId) {
            return base.Channel.GetLocalesByContentIdContentAsync(contentId);
        }
        
        public void UpdateContent(int id, string title, string content, string fileTitle, string fileUrl, string imageUrl) {
            base.Channel.UpdateContent(id, title, content, fileTitle, fileUrl, imageUrl);
        }
        
        public System.Threading.Tasks.Task UpdateContentAsync(int id, string title, string content, string fileTitle, string fileUrl, string imageUrl) {
            return base.Channel.UpdateContentAsync(id, title, content, fileTitle, fileUrl, imageUrl);
        }
        
        public durer2.ServiceReference.ContentDto GetLocaleByIdContent(int id) {
            return base.Channel.GetLocaleByIdContent(id);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.ContentDto> GetLocaleByIdContentAsync(int id) {
            return base.Channel.GetLocaleByIdContentAsync(id);
        }
        
        public durer2.ServiceReference.ContentBannerDto GetBannerLocaleByIdContent(int id) {
            return base.Channel.GetBannerLocaleByIdContent(id);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.ContentBannerDto> GetBannerLocaleByIdContentAsync(int id) {
            return base.Channel.GetBannerLocaleByIdContentAsync(id);
        }
        
        public durer2.ServiceReference.ContentBannerDto GetBannerLocaleByContentIdContent(int id) {
            return base.Channel.GetBannerLocaleByContentIdContent(id);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.ContentBannerDto> GetBannerLocaleByContentIdContentAsync(int id) {
            return base.Channel.GetBannerLocaleByContentIdContentAsync(id);
        }
        
        public durer2.ServiceReference.ContentBannerDto[] GetBannerLocalesByIdContent(int id) {
            return base.Channel.GetBannerLocalesByIdContent(id);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.ContentBannerDto[]> GetBannerLocalesByIdContentAsync(int id) {
            return base.Channel.GetBannerLocalesByIdContentAsync(id);
        }
        
        public void UpdateBannerContent(int id, string imageUrl) {
            base.Channel.UpdateBannerContent(id, imageUrl);
        }
        
        public System.Threading.Tasks.Task UpdateBannerContentAsync(int id, string imageUrl) {
            return base.Channel.UpdateBannerContentAsync(id, imageUrl);
        }
        
        public durer2.ServiceReference.NewsDto[] GetAllNews(System.Nullable<bool> isActive) {
            return base.Channel.GetAllNews(isActive);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.NewsDto[]> GetAllNewsAsync(System.Nullable<bool> isActive) {
            return base.Channel.GetAllNewsAsync(isActive);
        }
        
        public durer2.ServiceReference.NewsImageDto[] GetAllImagesNews() {
            return base.Channel.GetAllImagesNews();
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.NewsImageDto[]> GetAllImagesNewsAsync() {
            return base.Channel.GetAllImagesNewsAsync();
        }
        
        public void UpdateActiveNews(int newsId) {
            base.Channel.UpdateActiveNews(newsId);
        }
        
        public System.Threading.Tasks.Task UpdateActiveNewsAsync(int newsId) {
            return base.Channel.UpdateActiveNewsAsync(newsId);
        }
        
        public bool UpdateOrderNews(int newsId, bool isDown) {
            return base.Channel.UpdateOrderNews(newsId, isDown);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateOrderNewsAsync(int newsId, bool isDown) {
            return base.Channel.UpdateOrderNewsAsync(newsId, isDown);
        }
        
        public int GetMaxOrderNews() {
            return base.Channel.GetMaxOrderNews();
        }
        
        public System.Threading.Tasks.Task<int> GetMaxOrderNewsAsync() {
            return base.Channel.GetMaxOrderNewsAsync();
        }
        
        public bool DeleteItemNews(int newsId) {
            return base.Channel.DeleteItemNews(newsId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteItemNewsAsync(int newsId) {
            return base.Channel.DeleteItemNewsAsync(newsId);
        }
        
        public durer2.ServiceReference.NewsDto[] GetLocalesByIdNews(int id) {
            return base.Channel.GetLocalesByIdNews(id);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.NewsDto[]> GetLocalesByIdNewsAsync(int id) {
            return base.Channel.GetLocalesByIdNewsAsync(id);
        }
        
        public durer2.ServiceReference.NewsDto GetLocaleByIdNews(int id) {
            return base.Channel.GetLocaleByIdNews(id);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.NewsDto> GetLocaleByIdNewsAsync(int id) {
            return base.Channel.GetLocaleByIdNewsAsync(id);
        }
        
        public void UpdateNews(int id, string title, string content, System.DateTime date) {
            base.Channel.UpdateNews(id, title, content, date);
        }
        
        public System.Threading.Tasks.Task UpdateNewsAsync(int id, string title, string content, System.DateTime date) {
            return base.Channel.UpdateNewsAsync(id, title, content, date);
        }
        
        public void CreateNews(string title, string content, System.DateTime date) {
            base.Channel.CreateNews(title, content, date);
        }
        
        public System.Threading.Tasks.Task CreateNewsAsync(string title, string content, System.DateTime date) {
            return base.Channel.CreateNewsAsync(title, content, date);
        }
        
        public durer2.ServiceReference.NewsDto GetByIdNews(int id, System.Nullable<bool> isActive) {
            return base.Channel.GetByIdNews(id, isActive);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.NewsDto> GetByIdNewsAsync(int id, System.Nullable<bool> isActive) {
            return base.Channel.GetByIdNewsAsync(id, isActive);
        }
        
        public durer2.ServiceReference.NewsImageDto[] GetImagesByIdNews(int id) {
            return base.Channel.GetImagesByIdNews(id);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.NewsImageDto[]> GetImagesByIdNewsAsync(int id) {
            return base.Channel.GetImagesByIdNewsAsync(id);
        }
        
        public durer2.ServiceReference.NewsImageDto GetImageByIdNews(int id) {
            return base.Channel.GetImageByIdNews(id);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.NewsImageDto> GetImageByIdNewsAsync(int id) {
            return base.Channel.GetImageByIdNewsAsync(id);
        }
        
        public void CreateImageNews(int newsId, string imageUrl) {
            base.Channel.CreateImageNews(newsId, imageUrl);
        }
        
        public System.Threading.Tasks.Task CreateImageNewsAsync(int newsId, string imageUrl) {
            return base.Channel.CreateImageNewsAsync(newsId, imageUrl);
        }
        
        public bool DeleteImageNews(int imageId) {
            return base.Channel.DeleteImageNews(imageId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteImageNewsAsync(int imageId) {
            return base.Channel.DeleteImageNewsAsync(imageId);
        }
        
        public void UpdateImageNews(int id, string imageUrl) {
            base.Channel.UpdateImageNews(id, imageUrl);
        }
        
        public System.Threading.Tasks.Task UpdateImageNewsAsync(int id, string imageUrl) {
            return base.Channel.UpdateImageNewsAsync(id, imageUrl);
        }
        
        public durer2.ServiceReference.PageDto[] GetAllByParentIdPage(int parentId, System.Nullable<bool> isActive) {
            return base.Channel.GetAllByParentIdPage(parentId, isActive);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.PageDto[]> GetAllByParentIdPageAsync(int parentId, System.Nullable<bool> isActive) {
            return base.Channel.GetAllByParentIdPageAsync(parentId, isActive);
        }
        
        public durer2.ServiceReference.PageDto[] GetLocalesByPageIdPage(int pageId) {
            return base.Channel.GetLocalesByPageIdPage(pageId);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.PageDto[]> GetLocalesByPageIdPageAsync(int pageId) {
            return base.Channel.GetLocalesByPageIdPageAsync(pageId);
        }
        
        public durer2.ServiceReference.PageDto[] GetProductsPage(bool isDurer) {
            return base.Channel.GetProductsPage(isDurer);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.PageDto[]> GetProductsPageAsync(bool isDurer) {
            return base.Channel.GetProductsPageAsync(isDurer);
        }
        
        public durer2.ServiceReference.PageDto GetLocaleByIdPage(int id) {
            return base.Channel.GetLocaleByIdPage(id);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.PageDto> GetLocaleByIdPageAsync(int id) {
            return base.Channel.GetLocaleByIdPageAsync(id);
        }
        
        public void UpdatePage(int id, string title, string content, string imageUrl) {
            base.Channel.UpdatePage(id, title, content, imageUrl);
        }
        
        public System.Threading.Tasks.Task UpdatePageAsync(int id, string title, string content, string imageUrl) {
            return base.Channel.UpdatePageAsync(id, title, content, imageUrl);
        }
        
        public durer2.ServiceReference.PageDto GetByPermalinkPage(string permalink) {
            return base.Channel.GetByPermalinkPage(permalink);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.PageDto> GetByPermalinkPageAsync(string permalink) {
            return base.Channel.GetByPermalinkPageAsync(permalink);
        }
        
        public string GetOtherCulturePermalinkPage(string permalink) {
            return base.Channel.GetOtherCulturePermalinkPage(permalink);
        }
        
        public System.Threading.Tasks.Task<string> GetOtherCulturePermalinkPageAsync(string permalink) {
            return base.Channel.GetOtherCulturePermalinkPageAsync(permalink);
        }
        
        public durer2.ServiceReference.PageDto GetFirstByParentIdPage(int parentId) {
            return base.Channel.GetFirstByParentIdPage(parentId);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.PageDto> GetFirstByParentIdPageAsync(int parentId) {
            return base.Channel.GetFirstByParentIdPageAsync(parentId);
        }
        
        public durer2.ServiceReference.PageDto GetByIdPage(int id) {
            return base.Channel.GetByIdPage(id);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.PageDto> GetByIdPageAsync(int id) {
            return base.Channel.GetByIdPageAsync(id);
        }
        
        public durer2.ServiceReference.PageDto[] GetPageLinksByParentIdPage(int parentId, System.Nullable<bool> isActive) {
            return base.Channel.GetPageLinksByParentIdPage(parentId, isActive);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.PageDto[]> GetPageLinksByParentIdPageAsync(int parentId, System.Nullable<bool> isActive) {
            return base.Channel.GetPageLinksByParentIdPageAsync(parentId, isActive);
        }
        
        public bool hasSubLinksPage(int parentId) {
            return base.Channel.hasSubLinksPage(parentId);
        }
        
        public System.Threading.Tasks.Task<bool> hasSubLinksPageAsync(int parentId) {
            return base.Channel.hasSubLinksPageAsync(parentId);
        }
        
        public int GetMaxOrderPage(int parentId) {
            return base.Channel.GetMaxOrderPage(parentId);
        }
        
        public System.Threading.Tasks.Task<int> GetMaxOrderPageAsync(int parentId) {
            return base.Channel.GetMaxOrderPageAsync(parentId);
        }
        
        public int GetMaxFileOrderPage(int pageId) {
            return base.Channel.GetMaxFileOrderPage(pageId);
        }
        
        public System.Threading.Tasks.Task<int> GetMaxFileOrderPageAsync(int pageId) {
            return base.Channel.GetMaxFileOrderPageAsync(pageId);
        }
        
        public string RemoveAccentPage(string txt) {
            return base.Channel.RemoveAccentPage(txt);
        }
        
        public System.Threading.Tasks.Task<string> RemoveAccentPageAsync(string txt) {
            return base.Channel.RemoveAccentPageAsync(txt);
        }
        
        public void CreatePage(int parentId, string title, string content, string imageUrl) {
            base.Channel.CreatePage(parentId, title, content, imageUrl);
        }
        
        public System.Threading.Tasks.Task CreatePageAsync(int parentId, string title, string content, string imageUrl) {
            return base.Channel.CreatePageAsync(parentId, title, content, imageUrl);
        }
        
        public void UpdateActivePage(int pageId) {
            base.Channel.UpdateActivePage(pageId);
        }
        
        public System.Threading.Tasks.Task UpdateActivePageAsync(int pageId) {
            return base.Channel.UpdateActivePageAsync(pageId);
        }
        
        public bool DeleteItemPage(int pageId) {
            return base.Channel.DeleteItemPage(pageId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteItemPageAsync(int pageId) {
            return base.Channel.DeleteItemPageAsync(pageId);
        }
        
        public bool UpdateOrderPage(int pageId, bool isDown) {
            return base.Channel.UpdateOrderPage(pageId, isDown);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateOrderPageAsync(int pageId, bool isDown) {
            return base.Channel.UpdateOrderPageAsync(pageId, isDown);
        }
        
        public durer2.ServiceReference.PageFileDto[] GetFilesByIdPage(int pageId) {
            return base.Channel.GetFilesByIdPage(pageId);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.PageFileDto[]> GetFilesByIdPageAsync(int pageId) {
            return base.Channel.GetFilesByIdPageAsync(pageId);
        }
        
        public bool UpdateFileOrderPage(int fileId, bool isDown) {
            return base.Channel.UpdateFileOrderPage(fileId, isDown);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateFileOrderPageAsync(int fileId, bool isDown) {
            return base.Channel.UpdateFileOrderPageAsync(fileId, isDown);
        }
        
        public bool DeleteFilePage(int fileId) {
            return base.Channel.DeleteFilePage(fileId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteFilePageAsync(int fileId) {
            return base.Channel.DeleteFilePageAsync(fileId);
        }
        
        public void CreateFilePage(int pageId, string fileUrl, string title) {
            base.Channel.CreateFilePage(pageId, fileUrl, title);
        }
        
        public System.Threading.Tasks.Task CreateFilePageAsync(int pageId, string fileUrl, string title) {
            return base.Channel.CreateFilePageAsync(pageId, fileUrl, title);
        }
        
        public durer2.ServiceReference.PageFileDto[] GetFileLocalesByIdPage(int fileId) {
            return base.Channel.GetFileLocalesByIdPage(fileId);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.PageFileDto[]> GetFileLocalesByIdPageAsync(int fileId) {
            return base.Channel.GetFileLocalesByIdPageAsync(fileId);
        }
        
        public void UpdateFilePage(int id, string fileUrl, string title) {
            base.Channel.UpdateFilePage(id, fileUrl, title);
        }
        
        public System.Threading.Tasks.Task UpdateFilePageAsync(int id, string fileUrl, string title) {
            return base.Channel.UpdateFilePageAsync(id, fileUrl, title);
        }
        
        public durer2.ServiceReference.PageFileDto GetFileLocaleByIdPage(int id) {
            return base.Channel.GetFileLocaleByIdPage(id);
        }
        
        public System.Threading.Tasks.Task<durer2.ServiceReference.PageFileDto> GetFileLocaleByIdPageAsync(int id) {
            return base.Channel.GetFileLocaleByIdPageAsync(id);
        }
        
        public void SendMail(string body, string fullName, string title) {
            base.Channel.SendMail(body, fullName, title);
        }
        
        public System.Threading.Tasks.Task SendMailAsync(string body, string fullName, string title) {
            return base.Channel.SendMailAsync(body, fullName, title);
        }
        
        public bool CheckLoginUser(string userName, string pass) {
            return base.Channel.CheckLoginUser(userName, pass);
        }
        
        public System.Threading.Tasks.Task<bool> CheckLoginUserAsync(string userName, string pass) {
            return base.Channel.CheckLoginUserAsync(userName, pass);
        }
    }
}
